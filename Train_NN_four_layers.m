%--------------------------------------------------------------------------
% This script is partly generated by MATLAB Neural Net Pattern Recognition
% App, which uses a 4-layer fully-connected NN to train on 95% variacne
% dataset, with nodes number of three hidden layers to be 512, 256 and 128
%--------------------------------------------------------------------------

% This script assumes these variables are defined:
%   gene_chip_reduction_norm - input data.
%   disease_list_bool_mat - target data.

x = gene_chip_reduction_norm';
t = disease_list_bool_mat';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
% Change the size and structure of the network here:
hiddenLayerSize = 512;
% hiddenLayerSize = [512 256 128];
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
figure, plottrainstate(tr)
figure, ploterrhist(e)
figure, plotconfusion(t,y)
figure, plotroc(t,y)

% Plot the regression result figure, should not be used in this task
% trOut = y(tr.trainInd);
% vOut = y(tr.valInd);
% tsOut = y(tr.testInd);
% trTarg = t(tr.trainInd);
% vTarg = t(tr.valInd);
% tsTarg = t(tr.testInd);
% plotregression(trTarg, trOut, 'Train', vTarg, vOut, 'Validation', tsTarg, tsOut, 'Testing')
